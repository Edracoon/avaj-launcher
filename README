Some examples of design patterns that can be implemented in Java include:
- Singleton Pattern: Ensures that a class has only one instance and provides a global point of access to that instance.
- Observer Pattern: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.
- Decorator Pattern: Attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.
- Factory Pattern: Defines an interface for creating objects, but allows subclasses to decide which class to instantiate.
- Strategy Pattern: Defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

• You are not allowed to use any external libraries, build tools or code generators.
• Do not use the default package.
• Create your own relevant packages following the Java package naming conventions.

• Compile the project running the commands bellow in the root of your project folder.
~$ find * -name "*.java" > sources.txt
~$ javac @sources.txt
